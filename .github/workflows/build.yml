#Workflow name
name: CI/CD Pipeline
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main
env:
  applicationfolder: spring-boot-hello-world-example
jobs:
  #Test's job
  tests:
    name: Unit tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run Tests
      - name: Run Tests
        working-directory: ${{ env.applicationfolder }}
        run: mvn -Dmaven.test.skip=true clean install
  #Build's job
  build:
    #Depends on sonar's job
    needs: tests
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build with Maven
        working-directory: ${{ env.applicationfolder }}
        run: mvn -B package -DskipTests --file pom.xml
      - name: Set build file name
        run: |
          mv ${{ env.applicationfolder }}/target/SpringBootHelloWorldExampleApplication-*.jar ${{ env.applicationfolder }}/target/SpringBootHelloWorldExampleApplication-${{ github.run_number }}.jar
          ls -lrt ${{ env.applicationfolder }}/target
          echo "ARTIFACT_NAME=SpringBootHelloWorldExampleApplication-${{ github.run_number }}.jar" >> $GITHUB_ENV
      - name: Test
        run: echo $ARTIFACT_NAME
      #Upload Jar
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          #Set artifact name
          name: artifact-${{ github.run_number }}.jar
          #From this path
          path: ${{ env.applicationfolder }}/target/SpringBootHelloWorldExampleApplication-*.jar
  #Upload's job
  upload:
    needs: build
    name: Upload
     #Run on Ubuntu using the latest version
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Upload JAR
        working-directory: ${{ env.applicationfolder }}/target
        run: AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} aws s3 cp ./$ARTIFACT_NAME s3://${{secrets.AWS_BUCKET}}/$ARTIFACT_NAME
