#Workflow name
name: CI/CD Pipeline
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main
env:
  applicationfolder: spring-boot-hello-world-example
  artifactname: artifact-${{ github.run_number }}.jar
  archivename: artifact-${{ github.run_number }}.zip
  AWS_REGION: us-east-1
  appname: GitDeployApp
  deploy-group: GitDeployGroup
jobs:
  #Test's job
  tests:
    name: Unit tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run Tests
      - name: Run Tests
        working-directory: ${{ env.applicationfolder }}
        run: mvn -Dmaven.test.skip=true clean install
  #Build's job
  build:
    #Depends on sonar's job
    needs: tests
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build with Maven
        working-directory: ${{ env.applicationfolder }}
        run: mvn -B package -DskipTests --file pom.xml
      #Prepare the artifact
      - name: Prepare artifact
        run: |
          cp spring-boot-hello-world-example/target/*.jar ./${{ env.artifactname }}
          mkdir archive
          cp -r ./*.jar appspec.yml aws/* archive
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      #Upload Jar
      # - name: Upload to S3
      #   run: aws s3 cp --region ${{ env.AWS_REGION }} ./${{ env.artifactname }} s3://${{secrets.AWS_BUCKET}}/${{ env.archivename }}
      # Deploy push to AWS S3
      - name: AWS Deploy push
        run: |
          aws deploy push \
          --application-name ${{ env.appname }} \
          --description "This is a revision for the ${{ env.appname }}-${{ github.sha }}" \
          --ignore-hidden-files \
          --s3-location s3://${{ secrets.AWS_BUCKET }}/${{ env.archivename }} \
          --source ./archive
      # # Create deployment to CodeDeploy
      # - name: AWS Create Deployment
      #   run: |
      #     aws deploy create-deployment \
      #      --application-name ${{ env.appname }} \
      #      --deployment-config-name CodeDeployDefault.OneAtATime \
      #      --deployment-group-name ${{ env.deploy-group }} \
      #      --file-exists-behavior OVERWRITE \
      #      --s3-location bucket=${{ secrets.AWS_BUCKET }},key=${{ env.archivename }},bundleType=zip \
