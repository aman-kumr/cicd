#Workflow name
name: CI/CD Pipeline
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main
env:
  applicationfolder: spring-boot-hello-world-example
  artifactname: artifact-${{ github.run_number }}.jar
  archivename: artifact-${{ github.run_number }}.zip
  AWS_REGION: us-east-1
jobs:
  #Test's job
  tests:
    name: Unit tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run Tests
      - name: Run Tests
        working-directory: ${{ env.applicationfolder }}
        run: mvn -Dmaven.test.skip=true clean install
  #Build's job
  build:
    #Depends on sonar's job
    needs: tests
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build with Maven
        working-directory: ${{ env.applicationfolder }}
        run: mvn -B package -DskipTests --file pom.xml
      #Prepare the artifact
      - name: Prepare artifact
        run: |
          cp spring-boot-hello-world-example/target/*.jar ./${{ env.artifactname }}
          zip ${{ env.archivename }} ./*.jar
      #Upload Jar
      - name: Upload to S3
        run: AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} aws s3 cp --region ${{ env.AWS_REGION }} ./${{ env.artifactname }} s3://${{secrets.AWS_BUCKET}}/${{ env.archivename }}
  #Deploy Job
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Deploy in EC2
      env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE  }}
          HOSTNAME : ${{ secrets.EC2_ADDRESS  }}
          USER_NAME : ${{ secrets.SSH_USERNAME  }}

      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
        aws s3 cp --region ${{ env.AWS_REGION }} s3://${{secrets.AWS_BUCKET}}/${{ env.archivename }} ~/stage/
        unzip ~/stage/${{ env.archivename }}

        #Now we have got the access of EC2 and we will start the deploy .
        app_process=$(jps | grep artifact | awk '{print $1}')
        if [ -z "$app_process" ]; then
            kill -9 $app_process
        fi
        mv ~/stage/${{ env.artifactname }} ~
        nohup java -jar ${{ env.artifactname }} &
